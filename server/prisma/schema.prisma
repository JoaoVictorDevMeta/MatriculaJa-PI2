datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

//Parte relacionado a usuario
model Configuracao {
  id                       String  @id @default(uuid())
  servico_email            String
  usuario_servico_email    String
  senha_servico_email      String
  url_prematricula         String
  url_matricula            String
  calendario_datas         String
  ativo                    Boolean
  id_responsavel_alteracao String

  datahora_alteracao    DateTime @default(now()) @updatedAt
  responsavel_alteracao Usuario  @relation(fields: [id_responsavel_alteracao], references: [id], onDelete: Cascade)
}

model Usuario {
  id           String  @id @default(uuid())
  nome_usuario String
  email        String  @unique
  senha        String
  id_perfil_fk String
  id_turma_fk  String?

  perfil                  Perfil                 @relation(fields: [id_perfil_fk], references: [id], onDelete: Cascade)
  configuracoes_alteradas Configuracao[]
  alertasUsuarios         AlertaUsuarios[]
  resposta_comunicacao    RespostasComunicacao[]
  turma                   Turma?                 @relation(fields: [id_turma_fk], references: [id], onDelete: Cascade)
}

model Perfil {
  id          String    @id @default(uuid())
  nome_perfil String
  usuarios    Usuario[]
}

//Parte Relacionado a Alertas
model Alerta {
  id                     String @id @default(uuid())
  id_categoria_alerta_fk String
  titulo                 String
  descricao              String

  datahora_envio DateTime @default(now())

  alertasUsuarios  AlertaUsuarios[]
  categoria_alerta CategoriaAlerta  @relation(fields: [id_categoria_alerta_fk], references: [id], onDelete: Cascade)
}

model CategoriaAlerta {
  id             String   @id @default(uuid())
  nome_categoria String   @unique
  alertas        Alerta[]
}

model AlertaUsuarios {
  id            String @id @default(uuid())
  id_alerta_fk  String
  id_usuario_fk String

  alerta  Alerta  @relation(fields: [id_alerta_fk], references: [id], onDelete: Cascade)
  usuario Usuario @relation(fields: [id_usuario_fk], references: [id], onDelete: Cascade)
}

//Parte Relacionado a comunicações
model RespostasComunicacao {
  id                String @id @default(uuid())
  id_comunicacao_fk String
  id_respondente_fk String

  resposta          String
  datahora_resposta DateTime @default(now())

  comunicacao ComunicacaoSite @relation(fields: [id_comunicacao_fk], references: [id], onDelete: Cascade)
  usuario     Usuario         @relation(fields: [id_respondente_fk], references: [id], onDelete: Cascade)
}

model ComunicacaoSite {
  id                     String @id @default(uuid())
  id_tipo_comunicacao_fk String

  email_contato  String
  descricao      String
  fechada        Boolean  @default(false)
  datahora_envio DateTime @default(now())

  respostas        RespostasComunicacao[]
  tipo_comunicacao TipoComunicacao        @relation(fields: [id_tipo_comunicacao_fk], references: [id], onDelete: Cascade)
}

model TipoComunicacao {
  id               String            @id @default(uuid())
  nome_comunicacao String            @unique
  comunicacoes     ComunicacaoSite[]
}

//Parte relacionado as escolas
model Escola {
  id          String @id @default(uuid())
  nome_escola String @unique
  endereco    String
  telefone    String
  email       String

  turmas Turma[]
}

model Turma {
  id           String @id @default(uuid())
  id_escola_fk String
  nome_turma   String
  turno        String

  escola Escola    @relation(fields: [id_escola_fk], references: [id], onDelete: Cascade)
  alunos Usuario[]
}
